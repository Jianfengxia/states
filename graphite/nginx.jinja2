{#-
Use of this source code is governed by a BSD license that can be found
in the doc/license.rst file.

Author: Bruno Clermont <bruno@robotinfra.com>
Maintainer: Viet Hung Nguyen <hvn@robotinfra.com>
-#}
# {{ salt['pillar.get']('message_do_not_modify') }}

upstream graphite {
    server unix:///var/lib/uwsgi/graphite.sock;
}

server {
    listen 80;
{% if salt['pillar.get']('graphite:ssl', False) %}
{% if salt['pillar.get']('graphite:ssl_redirect', False) %}
    {# if https, redirect http port 80 to https port 443 #}
    server_name {% for hostname in salt['pillar.get']('graphite:hostnames') %}{{ hostname }}{% if not loop.last %} {% endif %}{% endfor %};
    return 301 https://{{ salt['pillar.get']('graphite:hostnames')[0] }}$request_uri;
}
{#- https server #}
server {
{% endif %}{# redirect http to https #}
{%- from 'nginx/macro.jinja2' import ssl_config with context %}
    {{ ssl_config(salt['pillar.get']('graphite:ssl', False)) }}
{% endif %}
{#- web app logic #}
    server_name {% for hostname in salt['pillar.get']('graphite:hostnames') %}{{ hostname }}{% if not loop.last %} {% endif %}{% endfor %};

    root /usr/local/graphite/webapp/;

    location /favicon.ico {
        deny all;
        return 404;
    }

    # deny read file ie.css
    location ~* /common/ie.css {
        deny all;
        return 404;
    }

{% include "nginx/block_hacks.jinja2" %}

{%- if salt['pillar.get']('graphite:render_allows', []) %}
    location /render/ {
  {%- for network in salt['pillar.get']('graphite:render_allows', []) %}
        allow {{ network }};
  {%- endfor %}
        deny all;
    }
{%- endif %}

    rewrite /media/css/dashboard.css /content/css/dashboard.css last;

    location /media/ {
        root /usr/local/graphite/lib/python{{ grains['pythonversion'][0] }}.{{ grains['pythonversion'][1] }}/site-packages/django/contrib/admin;
        expires 1h;
        autoindex off;
    }

    location /content/ {
        expires 1h;
        autoindex off;
    }

{% include 'nginx/location_robots.jinja2' %}

    location / {
        uwsgi_pass graphite;
        include uwsgi_params;
        uwsgi_read_timeout {{ salt['pillar.get']('graphite:timeout', 30) }};
        uwsgi_send_timeout {{ salt['pillar.get']('graphite:timeout', 30) }};
    }
}
