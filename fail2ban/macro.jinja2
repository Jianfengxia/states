{#- Usage of this is governed by a license that can be found in doc/license.rst -#}

{%- from "os.jinja2" import os with context %}
{%- macro fail2ban_regex_test(formula, jail, tag, message, timeout=60) %}

{%- set fake_ip = '5.6.7.8' %}

fake_{{ formula }}_login:
  cmd:
    - script
    - source: salt://fail2ban/fake_login.jinja2
    - template: jinja
    - args: |
        {{ tag|default(formula) }} "{{ message }}"
    - require:
      - sls: bash
      - sls: fail2ban
  module:
    - run
    - name: service.restart
    - m_name: fail2ban
    - require:
      - cmd: fake_{{ formula }}_login

{%- set banaction = salt['pillar.get']('fail2ban:banaction', 'hostsdeny') %}

test_fail2ban_{{ formula }}:
  cmd:
    - script
    - source: salt://fail2ban/wait_for_banned.jinja2
    - template: jinja
{%- if banaction.startswith('iptables') %}
    - args: "-c fail2ban-{{ jail|default(formula) }} -s {{ fake_ip }} -j {% if os.is_precise %}DROP{% else %}REJECT{% endif %}"
{%- else %}
    - args: "-n {{ formula }} -s {{ fake_ip }}"
{%- endif %}
    - require:
      - module: fake_{{ formula }}_login
      - pkg: python
{%- if banaction.startswith('iptables') %}
      - pkg: iptables
{%- endif %}
  module:
    - run
    - name: cmd.run
    - cmd: fail2ban-client set {% if banaction.startswith('iptables') %}{{ jail|default(formula) }}{% else %}{{ formula }}{% endif %} unbanip {{ fake_ip }}
    - require:
      - cmd: test_fail2ban_{{ formula }}
{%- endmacro %}
