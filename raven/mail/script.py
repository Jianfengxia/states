#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Do not edit this file, this is handled by Salt and your changes will be lost.

# Copyright (c) 2013, Bruno Clermont
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Bruno Clermont <patate@fastmail.cn>
# Maintainer: Bruno Clermont <patate@fastmail.cn>
#             Quan Tong Anh <tonganhquan.net@gmail.com>

"""
RavenMail: Emulate /usr/bin/mail(x) but send mail to a Sentry server instead.

To overwrite default Sentry DSN, set environment variable SENTRY_DSN.
"""

import sys
import os
import logging
import logging.handlers
import copy

import pysc

# TODO:
# add or use (if already there) pysc Raven client initialization


def configure_logging():
    log = logging.getLogger('sentry.errors')
    fmt = logging.Formatter("%(asctime)-15s mail[%(process)d] %(message)s",
                            datefmt='%b %d %H:%M:%S')
    handler = logging.handlers.SysLogHandler('/dev/log')
    handler.setFormatter(fmt)
    log.addHandler(handler)
    return log

log = configure_logging()


class Mail(pysc.Application):
    """
    Send an email
    """
    def get_argument_parser(self):
        argp = super(Mail, self).get_argument_parser()
        argp.add_argument('-s', '--subject', help="Subject")
        argp.add_argument('extra_args', nargs='*')
        return argp

        # init raven quickly, so if something is wrong it get logged early
        from raven import Client
        if 'SENTRY_DSN' not in os.environ.keys():
            os.environ['SENTRY_DSN'] = "requests+{{ pillar['sentry_dsn'] }}"
        client = Client()

        # init raven quickly, so if something is wrong it get logged early
        from raven import Client
        if 'SENTRY_DSN' not in os.environ.keys():
            os.environ['SENTRY_DSN'] = "{{ pillar['sentry_dsn'] }}"
        client = Client()

        if self.config['subject']:
            msg = os.linesep.join((self.config['subject'], body))
        else:
            msg = body

        # copy os.environ and remove DSN
        environ = copy.copy(dict(os.environ))
        environ['command-line'] = self.config['extra_args']
        environ.pop('SENTRY_DSN', None)
        client.captureMessage(msg, extra=environ)

if __name__ == "__main__":
    Mail().run()
