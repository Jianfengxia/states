{#- Usage of this is governed by a license that can be found in doc/license.rst -#}

# {{ salt['pillar.get']('message_do_not_modify') }}

{%- set allow_version_overwrite = salt["pillar.get"]("djangopypi2:allow_version_overwrite", False) %}

DEBUG = False
TEMPLATE_DEBUG = False

ADMINS = ()
TIME_ZONE = '{{ salt['pillar.get']('timezone', 'UTC') }}'
LANGUAGE_CODE = 'en_US'
ALLOW_VERSION_OVERWRITE = {%- if allow_version_overwrite %}{{ allow_version_overwrite }}{%- else %} ''{%- endif %}

MANAGERS = ()

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ salt["pillar.get"]("djangopypi2:db:name", "djangopypi2") }}',
        'USER': '{{ salt["pillar.get"]("djangopypi2:db:username", "djangopypi2") }}',
        'PASSWORD': '{{ salt["password.pillar"]("djangopypi2:db:password", 10) }}',
        'HOST': '{{ salt["pillar.get"]("djangopypi2:db:host", "127.0.0.1") }}',
        'PORT': '5432',
    }
}

SITE_ID = 1

USE_I18N = True
USE_L10N = True
USE_TZ = True

MEDIA_ROOT = '/var/lib/deployments/djangopypi2/media'
MEDIA_URL = '/media/'

STATIC_ROOT = '/var/lib/deployments/djangopypi2/static'
STATIC_URL = '/static/'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'unix:/tmp/memcached.sock',
    }
}

SECRET_KEY = '{{ salt['password.pillar']('djangopypi2:django_key', 32) }}'

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
#     'django.template.loaders.eggs.Loader',
)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
)

ROOT_URLCONF = 'djangopypi2.website.urls'

WSGI_APPLICATION = 'djangopypi2.website.wsgi.application'

LOGIN_URL = '/accounts/login/'
LOGOUT_URL = '/accounts/logout/'
LOGIN_REDIRECT_URL = '/'

TEMPLATE_CONTEXT_PROCESSORS = [
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.request',
]

WEBSITE_ROOT = '/usr/local/djangopypi2/lib/python2.7/site-packages/djangopypi2/website'

TEMPLATE_DIRS = (
    '/usr/local/djangopypi2/lib/python2.7/site-packages/djangopypi2/website/templates',
)

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'registration',
    'djangopypi2.apps.pypi_ui',
    'djangopypi2.apps.pypi_users',
    'djangopypi2.apps.pypi_manage',
    'djangopypi2.apps.pypi_metadata',
    'djangopypi2.apps.pypi_packages',
    'djangopypi2.apps.pypi_frontend',
    'django_insecure',
)

ACCOUNT_ACTIVATION_DAYS = 7

{%- set smtp = salt['pillar.get']('djangopypi2:email', False)|default(salt['pillar.get']('smtp'), boolean=True) %}
EMAIL_HOST = '{{ smtp['server'] }}'
EMAIL_HOST_PASSWORD = '{{ smtp['password']|default('') }}'
EMAIL_HOST_USER = '{{ smtp['user']|default('') }}'
EMAIL_PORT = {{ smtp['port'] }}
DEFAULT_FROM_EMAIL = '{{ smtp['from'] }}'
{%- set encryption = smtp['encryption']|default('plain') -%}
{%- if encryption in ('ssl', 'starttls') %}
EMAIL_USE_TLS = True
    {%- if encryption == 'ssl' %}
EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'
    {%- endif -%}
{%- else %}
EMAIL_USE_TLS = False
{%- endif %}


{%- if salt['pillar.get']('djangopypi2:ssl', False) %}
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
{%- endif %}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'message_only': {
            'format': '[djangopypi2] %(message)s'
        },
        'syslog': {
            'format': '%(asctime)-15s djangopypi2[%(process)d] %(levelname)s %(name)s %(module)s.%(funcName)s:%(lineno)d %(message)s',
            'datefmt': '%b %d %H:%M:%S'
        }
    },
    'handlers': {
{%- set graylog2_address = salt['pillar.get']('graylog2_address', False) %}
{%- if graylog2_address %}
        'gelf': {
            'level': 'NOTSET',
            'class': 'graypy.handler.GELFHandler',
            'host': '{{ graylog2_address }}',
            'formatter': 'message_only'
        },
{%- endif %}
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.handlers.SentryHandler'
        },
        'syslog': {
            'level': 'NOTSET',
            'formatter': 'syslog',
            'class': 'logging.handlers.SysLogHandler',
            'address': '/dev/log',
            'facility': '{% if graylog2_address %}local7{% else %}daemon{% endif %}'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django': {
            'handlers': ['sentry', 'syslog'{% if graylog2_address %}, 'gelf'{% endif %}],
            'propagate': True,
            'level':'DEBUG'
        },
        'raven': {
            'handlers': ['sentry', 'syslog'{% if graylog2_address %}, 'gelf'{% endif %}],
            'level': 'WARN',
            'propagate': False
        },
        'sentry.errors': {
            'handlers': ['syslog'{% if graylog2_address %}, 'gelf'{% endif %}],
            'level': 'DEBUG',
            'propagate': False
        },
     },
    'root': {
        'handlers': ['sentry', 'syslog'{% if graylog2_address %}, 'gelf'{% endif %}],
        'propagate': True,
        'level': 'NOTSET'
    },
}
RAVEN_CONFIG = {
    'dsn': 'requests+{{ salt['pillar.get']('djangopypi2:sentry', False)|default(salt['pillar.get']('sentry_dsn', False), boolean=True) }}',
}

{%- if salt['pillar.get']('graphite_address', False) %}
MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + (
    'django_statsd.middleware.GraphiteRequestTimingMiddleware',
    'django_statsd.middleware.GraphiteMiddleware'
)
INSTALLED_APPS += ('django_statsd',)
STATSD_PREFIX = 'djangopypi2'
STATSD_CLIENT = 'django_statsd.clients.normal'
{%- endif %}

ALLOWED_HOSTS = [{% for hostname in salt['pillar.get']('djangopypi2:hostnames') %}"{{ hostname }}"{% if not loop.last %} , {% endif %}{% endfor %}]
