{#-
Use of this source code is governed by a BSD license that can be found
in the doc/license.rst file.


-#}
// {{ salt['pillar.get']('message_do_not_modify') }}

global {
    perm_cache = 2048;
    cache_dir = "/var/cache/pdnsd";
    run_as = "pdnsd";
    server_ip = {{ salt['pillar.get']('pdnsd:ip_address', '0.0.0.0') }};
    status_ctl = on;
    paranoid = on;
    min_ttl = {{ salt['pillar.get']('pdnsd:minimum_ttl', 900) }};
    max_ttl = {{ salt['pillar.get']('pdnsd:maximum_ttl', 604800) }};
    timeout = 10;
{%- if salt['pillar.get']('debug', False) %}
    debug = on;
{%- else %}
    debug = off;
{%- endif %}
    {#-
    Don't enable if you don't recurse yourself, can lead to problems
    delegation_only="com","net";
    #}
}

{%- if sections is mapping and sections|length > 0 -%}
    {%- for label, servers in sections.iteritems() -%}
        {%- if servers is iterable and servers is not string %}
{# This will be rendered to a blank line as separator between server sections #}
server {
    label = "{{ label }}";
    root_server = on;
    ip = {% for server in servers %}{{ server }}{% if not loop.last %}, {% endif %}{% endfor %};
    timeout = 5;
    uptest = query;
    interval = 30m;
    ping_timeout = 300;
    purge_cache = off;
    exclude = .localdomain;
    policy = included;
    preset = off;
}
        {%- endif -%}
    {%- endfor -%}
{%- else %}
server {
    label = "resolvconf";
}
{%- endif %}
