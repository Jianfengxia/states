#!/bin/bash
# {{ salt['pillar.get']('message_do_not_modify') }}
# Use of this is governed by a license that can be found in doc/license.rst.

# Common bash functions collection

######################################################
# Log script startup and stop time                   #
#                                                    #
# Usage: add following line at the top of the script #
#                                                    #
#   source /usr/local/share/salt-common.sh           #
#   log_start_script "$@"                            #
#   trap "log_stop_script \$?" EXIT                  #
######################################################

set -e

_prog_name=$(basename "$0")
_log_tag="${_prog_name}[$$]"

{%- if salt['pillar.get']('debug', False) %}
# File descriptor #4 is attached to logger for writing
# It means that the output write to that file descriptor will be redirected to logger
# then end in syslog
exec 4> >(logger -t "${_log_tag}" -p 'local0.debug')
# Available from 4.1
# This allows to specify the file descriptor to write the set -x debugging output to.
# In older versions of bash, this output always goes to stderr
BASH_XTRACEFD=4
set -x
{%- endif %}

_log_start_time=0

log_start_script() {
    _log_start_time=$(date +%s)

    if [ "$#" -gt 0 ]; then
        logger -t "${_log_tag}" -p 'local0.debug' "Started with args: $*"
    else
        logger -t "${_log_tag}" -p 'local0.debug' "Started at $(date -d @$_log_start_time)"
    fi
}

log_stop_script() {
    local _return_code=$1
    local _log_execution_time=0
    local _log_stop_time=$(date +%s)

    if [[ ${_log_start_time} -ne 0 ]]; then
        _log_execution_time=$(( _log_stop_time - _log_start_time ))
        logger -t "${_log_tag}" -p 'local0.info' \
            "Finish after ${_log_execution_time} seconds, return code: ${_return_code}"
    else
        logger -t "${_log_tag}" -p 'local0.info' \
            "Finish after N/A seconds, return code: ${_return_code}"
    fi

    if [[ -n "${_pid_file}" ]]; then
        test -f "${_pid_file}" && rm -f "${_pid_file}"
        logger -t "${_log_tag}" -p 'local0.info' \
            "PID file: ${_pid_file} deleted"
    fi
}

locking_script() {
    _pid_file="/var/run/${_prog_name}.pid"

    if test -f "${_pid_file}"; then
        test -n $(cat "${_pid_file}") && local _prev_pid=$(cat "${_pid_file}")
    fi
    exec 8>"${_pid_file}"
    if flock -n 8; then
        pid=$$
        echo $pid 1>&8
    else
        logger -t "${_log_tag}" -p 'local0.warning' \
            "Cannot run multiple instances at the same time. The first instance is running as PID $_prev_pid"
        echo $_prev_pid > "${_pid_file}"
        exit 1
    fi
}
