# {{ pillar['message_do_not_modify'] }}
[logging]
include = /etc/gsyslog.d/

{% if 'graylog2' not in pillar %}
[udp]
address = 127.0.0.1
port = 514
{% endif %}

[filters]
# keep this section, even if empty to enable filtering
#debug_handler = filter_debug

[loggers]
keys = root,archive,syslog_auth,syslog_authpriv

[handlers]
keys = {% if 'graylog2_address' in pillar %}gelf,{% endif %}logfile,auth
#keys = gelf,logfile,filter_debug

[formatters]
keys = detailed,debug,message_only,timed_message,syslog

[logger_root]
level = DEBUG
handlers = {% if 'graylog2_address' in pillar %}gelf,{% endif %}logfile

[logger_archive]
level = DEBUG
handlers = logfile
qualname = syslog.local7
propagate = 0

[logger_filter_debug]
qualname = filter_debug
level = DEBUG
handlers = filter_debug
propagate = 0

{% for facility in ('auth', 'authpriv') %}
[logger_syslog_{{ facility }}]
qualname = syslog.{{ facility }}
level = DEBUG
handlers = gelf,logfile,auth
{% endfor %}

{%- if 'graylog2_address' in pillar %}
[handler_gelf]
class=graypy.handler.GELFHandler
level=DEBUG
formatter=message_only
args = ('{{ pillar['graylog2_address'] }}', 12201)
{% endif -%}

[handler_logfile]
class = handlers.RotatingFileHandler
level = DEBUG
formatter = detailed
args = ('/var/log/all.log', 'a', 20000000, 5)

[handler_filter_debug]
class = handlers.RotatingFileHandler
level = INFO
formatter = message_only
args = ('/var/log/filter.log', 'a', 20000000, 5)

{# rsyslog compatible auth.log #}
[handler_auth]
class = handlers.TimedRotatingFileHandler
level = DEBUG
formatter = syslog
args = ('/var/log/auth.log', 'midnight')

[formatter_detailed]
format = %(realtimestamp)s %(facility)s:%(priority)s %(progname)s[%(pid)d] %(message)s
datefmt =
class = logging.Formatter

{# something as close as possible to regular rsyslog output #}
[formatter_syslog]
format = %(asctime)-15s {{ grains['id'] }} %(progname)s[%(pid)d]: %(message)s
datefmt = %b %d %H:%M:%S
class = logging.Formatter

[formatter_timed_message]
format = %(asctime)s %(message)s
datefmt =
class = logging.Formatter

[formatter_message_only]
format = %(message)s
datefmt =
class = logging.Formatter

[formatter_debug]
format = %(realtimestamp)s %(facility)s:%(priority)s %(levelname)s %(progname)s[%(pid)d] %(message)s
datefmt =
class = logging.Formatter

[handler_stdout]
class = StreamHandler
level = DEBUG
formatter = debug
args = ()

{% if not pillar['debug'] %}
# filter noisy (and useless) cron & ssh PAM session handling
# SSH still log properly who get in
[filter_pam_unix]
loggers = syslog.authpriv
deny_any =
    ^pam_unix\((sshd|cron|sudo):session\): session (opened|closed) for user
{% endif %}
