{#-
 Author: Bruno Clermont patate@fastmail.cn
 Maintainer: Bruno Clermont patate@fastmail.cn
 -#}
# {{ pillar['message_do_not_modify'] }}

import os.path

from sentry.conf.server import *

CONF_ROOT = os.path.dirname(__file__)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ salt['pillar.get']('sentry:db:name', 'sentry') }}',
        'USER': '{{ salt['pillar.get']('sentry:db:username', 'sentry') }}',
        'PASSWORD': '{{ salt['password.pillar']('sentry:db:password') }}',
        'HOST': '{{ salt['pillar.get']('sentry:db:host', '127.0.0.1') }}',
        'PORT': '5432',
    }
}

SENTRY_KEY = '{{ salt['password.pillar']('sentry:django_key', 50) }}'

{#-CACHE_PREFIX = 'sentry'#}
{#-CACHE_TIMEOUT = 300#}
{#-MIDDLEWARE_CLASSES.insert(0, 'johnny.middleware.QueryCacheMiddleware')#}
{#-MIDDLEWARE_CLASSES.insert(0, 'johnny.middleware.LocalStoreClearMiddleware')#}
{#-CACHES = {#}
{#-    'default' : dict(#}
{#-        BACKEND = 'johnny.backends.memcached.MemcachedCache',#}
{#-        LOCATION = [{% for ip in pillar['memcache_servers'] %}'{{ ip }}:11211'{% if not loop.last %},{% endif %}{% endfor %}],#}
{#-        JOHNNY_CACHE = True,#}
{#-    )#}
{#-}#}
{#-JOHNNY_MIDDLEWARE_KEY_PREFIX='sentry'#}


# Set this to false to require authentication
SENTRY_PUBLIC = False

# You should configure the absolute URI to Sentry. It will attempt to guess it if you don't
# but proxies may interfere with this.
SENTRY_URL_PREFIX = '{% if pillar['sentry']['ssl']|default(False) %}https{% else %}http{% endif %}://{{ pillar['sentry']['hostnames'][0] }}'  # No trailing slash!

{#-SENTRY_WEB_HOST = '0.0.0.0'#}
{#-SENTRY_WEB_PORT = 8080#}
{#-SENTRY_WEB_OPTIONS = {#}
{#-    'workers': {{ pillar['sentry']['workers'] }},  # the number of gunicorn workers#}
{#-    'worker_class': 'gevent',#}
{#-}#}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'message_only': {
            'format': '[sentry] %(message)s'
        },
        'syslog': {
            'format': '%(asctime)-15s sentry[%(process)d] %(levelname)s %(name)s %(module)s.%(funcName)s:%(lineno)d %(message)s',
            'datefmt': '%b %d %H:%M:%S'
        }
    },
    'handlers': {
{% if 'graylog2_address' in pillar %}
        'gelf': {
            'level': 'NOTSET',
            'class': 'graypy.handler.GELFHandler',
            'host': '{{ pillar['graylog2_address'] }}',
            'formatter': 'message_only'
        },
{% endif %}
        'syslog': {
            'level': 'NOTSET',
            'formatter': 'syslog',
            'class': 'logging.handlers.SysLogHandler',
            'address': '/dev/log',
            'facility': 'local7'
        },
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.handlers.SentryHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['sentry', 'syslog'{% if 'graylog2_address' in pillar %}, 'gelf'{% endif %}],
            'propagate': True,
            'level':'DEBUG'
        },
        'raven': {
            'handlers': ['sentry', 'syslog'{% if 'graylog2_address' in pillar %}, 'gelf'{% endif %}],
            'propagate': False,
            'level': 'WARN'
        },
        'sentry.errors': {
            'handlers': ['syslog'{% if 'graylog2_address' in pillar %}, 'gelf'{% endif %}],
            'level': 'DEBUG',
            'propagate': False
        }
    },
    'root': {
        'handlers': ['sentry', 'syslog'{% if 'graylog2_address' in pillar %}, 'gelf'{% endif %}],
        'propagate': True,
        'level': 'NOTSET'
    }
}

{% set smtp = salt['pillar.get']('sentry:smtp', salt['pillar.get']('smtp')) %}
EMAIL_HOST = '{{ smtp['server'] }}'
EMAIL_HOST_PASSWORD = '{{ smtp['password']|default('') }}'
EMAIL_HOST_USER = '{{ smtp['user']|default('') }}'
EMAIL_PORT = {{ smtp['port'] }}
DEFAULT_FROM_EMAIL = '{{ smtp['from'] }}'
{% if smtp['tls']|default(False) %}
EMAIL_USE_TLS = True
{% else %}
EMAIL_USE_TLS = False
{% endif %}

SERVER_EMAIL = DEFAULT_FROM_EMAIL
SENTRY_SERVER_EMAIL = SERVER_EMAIL

{% if 'graphite_address' in pillar %}
MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + (
    'django_statsd.middleware.GraphiteRequestTimingMiddleware',
    'django_statsd.middleware.GraphiteMiddleware'
)
INSTALLED_APPS += ('django_statsd',)
STATSD_PREFIX = 'sentry'
STATSD_CLIENT = 'django_statsd.clients.normal'
{% endif %}

ALLOWED_HOSTS = [{% for hostname in pillar['sentry']['hostnames'] %}"{{ hostname }}"{% if not loop.last %} , {% endif %}{% endfor %}]
