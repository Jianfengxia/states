{#-
Use of this source code is governed by a BSD license that can be found
in the doc/license.rst file.

Author: Bruno Clermont <bruno@robotinfra.com>
Maintainer: Van Pham Diep <favadi@robotinfra.com>
-#}
# {{ salt['pillar.get']('message_do_not_modify') }}

import os.path

from sentry.conf.server import *

CONF_ROOT = os.path.dirname(__file__)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ salt['pillar.get']('sentry:db:name', 'sentry') }}',
        'USER': '{{ salt['pillar.get']('sentry:db:username', 'sentry') }}',
        'PASSWORD': '{{ salt['password.pillar']('sentry:db:password', 10) }}',
        'HOST': '{{ salt['pillar.get']('sentry:db:host', '127.0.0.1') }}',
        'PORT': '5432',
    }
}

SENTRY_KEY = '{{ salt['password.pillar']('sentry:django_key', 50) }}'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': 'unix:/tmp/memcached.sock',
    }
}

# Set this to false to require authentication
SENTRY_PUBLIC = False

# You should configure the absolute URI to Sentry. It will attempt to guess it if you don't
# but proxies may interfere with this.
SENTRY_URL_PREFIX = '{% if salt['pillar.get']('sentry:ssl', False) %}https{% else %}http{% endif %}://{{ salt['pillar.get']('sentry:hostnames')[0] }}'  # No trailing slash!

{#-SENTRY_WEB_HOST = '0.0.0.0'#}
{#-SENTRY_WEB_PORT = 8080#}
{#-SENTRY_WEB_OPTIONS = {#}
{#-    'workers': {{ salt['pillar.get']('sentry:workers') }},  # the number of gunicorn workers#}
{#-    'worker_class': 'gevent',#}
{#-}#}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'message_only': {
            'format': '[sentry] %(message)s'
        },
        'syslog': {
            'format': '%(asctime)-15s sentry[%(process)d] %(levelname)s %(name)s %(module)s.%(funcName)s:%(lineno)d %(message)s',
            'datefmt': '%b %d %H:%M:%S'
        }
    },
    'handlers': {
{%- if salt['pillar.get']('graylog2_address', False) %}
        'gelf': {
            'level': 'NOTSET',
            'class': 'graypy.handler.GELFHandler',
            'host': '{{ salt['pillar.get']('graylog2_address', False) }}',
            'formatter': 'message_only'
        },
{% endif %}
        'syslog': {
            'level': 'NOTSET',
            'formatter': 'syslog',
            'class': 'logging.handlers.SysLogHandler',
            'address': '/dev/log',
            'facility': '{% if salt['pillar.get']('graylog2_address', False) %}local7{% else %}daemon{% endif %}'
        },
        'sentry': {
            'level': 'ERROR',
            'class': 'raven.contrib.django.handlers.SentryHandler'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['sentry', 'syslog'{% if salt['pillar.get']('graphite_address', False) %}, 'gelf'{% endif %}],
            'propagate': True,
            'level':'DEBUG'
        },
        'raven': {
            'handlers': ['sentry', 'syslog'{% if salt['pillar.get']('graphite_address', False) %}, 'gelf'{% endif %}],
            'propagate': False,
            'level': 'WARN'
        },
        'sentry.errors': {
            'handlers': ['syslog'{% if salt['pillar.get']('graphite_address', False) %}, 'gelf'{% endif %}],
            'level': 'DEBUG',
            'propagate': False
        }
    },
    'root': {
        'handlers': ['sentry', 'syslog'{% if salt['pillar.get']('graphite_address', False) %}, 'gelf'{% endif %}],
        'propagate': True,
        'level': 'NOTSET'
    }
}

{% set smtp = salt['pillar.get']('sentry:smtp', False)|default(salt['pillar.get']('smtp'), boolean=True) %}
EMAIL_HOST = '{{ smtp['server'] }}'
EMAIL_HOST_PASSWORD = '{{ smtp['password']|default('') }}'
EMAIL_HOST_USER = '{{ smtp['user']|default('') }}'
EMAIL_PORT = {{ smtp['port'] }}
DEFAULT_FROM_EMAIL = '{{ smtp['from'] }}'
{%- set encryption = smtp['encryption']|default('plain') -%}
{%- if encryption in ('ssl', 'starttls') %}
EMAIL_USE_TLS = True
    {%- if encryption == 'ssl' %}
EMAIL_BACKEND = 'django_smtp_ssl.SSLEmailBackend'
    {%- endif -%}
{%- else %}
EMAIL_USE_TLS = False
{%- endif %}

SERVER_EMAIL = DEFAULT_FROM_EMAIL
SENTRY_SERVER_EMAIL = SERVER_EMAIL

{% if salt['pillar.get']('graphite_address', False) %}
MIDDLEWARE_CLASSES = MIDDLEWARE_CLASSES + (
    'django_statsd.middleware.GraphiteRequestTimingMiddleware',
    'django_statsd.middleware.GraphiteMiddleware'
)
INSTALLED_APPS += ('django_statsd', 'django_insecure')
STATSD_PREFIX = 'sentry'
STATSD_CLIENT = 'django_statsd.clients.normal'
{% endif %}

ALLOWED_HOSTS = [{% for hostname in salt['pillar.get']('sentry:hostnames') %}"{{ hostname }}"{% if not loop.last %} , {% endif %}{% endfor %}]

STATIC_ROOT = '/var/lib/deployments/sentry/static'
STATIC_URL = '/_static/'

{#- XMPP/ejabber integration #}
INSTALLED_APPS += ('sentry_xmpp',)
