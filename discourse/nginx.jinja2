# {{ pillar['message_do_not_modify'] }}

types {
  text/csv csv;
}

upstream discourse {
  server unix:///var/lib/uwsgi/discourse.sock;
}

server {
  listen 80;

{%- if salt['pillar.get']('discourse:ssl', False) %}
{%- if salt['pillar.get']('discourse:ssl_redirect', False) %}
  {# if https, redirect http port 80 to https port 443 #}
  server_name {% for hostname in salt['pillar.get']('discourse:hostnames') %}{{ hostname }}{% if not loop.last %} {% endif %}{% endfor %};
  return 301 https://{{ salt['pillar.get']('discourse:hostnames')[0] }}$request_uri;
}
{# https server #}
server {
{% endif %}{# redirect http to https #}
  listen 443 ssl;
  ssl_certificate /etc/ssl/{{ salt['pillar.get']('discourse:ssl') }}/chained_ca.crt;
  ssl_certificate_key /etc/ssl/{{ salt['pillar.get']('discourse:ssl') }}/server.pem;
  ssl_client_certificate /etc/ssl/{{ salt['pillar.get']('discourse:ssl') }}/ca.crt;
  ssl_ciphers RC4:HIGH:!aNULL:!MD5;
  ssl_prefer_server_ciphers on;
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;
{%- endif %}
{#- web app logic #}

  gzip on;
  gzip_min_length 1000;
  gzip_types application/json text/css application/x-javascript;

  server_name {% for hostname in salt['pillar.get']('discourse:hostnames') %}{{ hostname }}{% if not loop.last %} {% endif %}{% endfor %};

  sendfile on;

  keepalive_timeout 65;

  {#-
   maximum file upload size (keep up to date when changing the corresponding site setting)
  #}
  client_max_body_size {{ salt['pillar.get']('discourse:upload_size', '2m') }};

  {#-
   path to discourse's public directory
  #}
  set $public {{ web_root_dir }}/public;

  location / {
    root $public;

    location ~ ^/assets/ {
      expires 1y;
      add_header Cache-Control public;
      add_header ETag "";
      break;
    }

    location ~ ^/uploads/ {
      expires 1y;
      add_header Cache-Control public;
      add_header ETag "";

      {#-
       optional upload anti-hotlinking rules
       valid_referers none blocked mysite.com *.mysite.com;
      if ($invalid_referer) {
        return 403;
      }
      #}

      {#-
       let NGINX serve images
      #}
      location ~* \.(gif|png|jpg|jpeg|bmp|tif|tiff)$ { try_files $uri =404; }
      location ~ /_optimized/ { try_files $uri =404; }

      {#-
       attachments must go through the rails application to get the right content-disposition header
      #}
      uwsgi_param X-Sendfile-Type X-Accel-Redirect;
      uwsgi_param X-Accel-Mapping $public/=/downloads/;
      
      uwsgi_modifier1 7;
      include uwsgi_params;
      uwsgi_pass discourse;
      break;
    }

    try_files $uri @discourse;
  }

  location /downloads/ {
    internal;
    alias $public/;
  }

  location @discourse {
    uwsgi_param X-Real-IP $remote_addr;
    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
    uwsgi_param X-Forwarded-Proto $scheme;
    uwsgi_param Host $http_host;

    uwsgi_modifier1 7;
    include uwsgi_params;
    uwsgi_pass discourse;
  }
}

