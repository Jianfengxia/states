{#-
Copyright (C) 2013 the Institute for Institutional Innovation by Data
Driven Design Inc.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE  MASSACHUSETTS INSTITUTE OF
TECHNOLOGY AND THE INSTITUTE FOR INSTITUTIONAL INNOVATION BY DATA
DRIVEN DESIGN INC. BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the names of the Institute for
Institutional Innovation by Data Driven Design Inc. shall not be used in
advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from the
Institute for Institutional Innovation by Data Driven Design Inc.

Author: Lam Dang Tung <lamdt@familug.org>
Maintainer: Lam Dang Tung <lamdt@familug.org>
-#}
# {{ pillar['message_do_not_modify'] }}

Discourse::Application.configure do
  {#-
  Settings specified here will take precedence over those in config/application.rb
  Code is not reloaded between requests
  #}
  config.cache_classes = true

  {#-
   Full error reports are disabled and caching is turned on
  #}
  config.consider_all_requests_local       = false
  config.action_controller.perform_caching = true

  {#-
   Disable Rails's static asset server (Apache or nginx will already do this)
  #}
  config.serve_static_assets = false

  {#-
   Compress JavaScripts and CSS
  #}
  config.assets.compress = true

  {#-
   stuff should be pre-compiled
  #}
  config.assets.compile = false

  {#-
   Generate digests for assets URLs
  #}
  config.assets.digest = true

  {#-
   Specifies the header that your server uses for sending files
  #}
  config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect'

  {#-
   Enable locale fallbacks for I18n (makes lookups for any locale fall back to
   the I18n.default_locale when a translation can not be found)
  #}
  config.i18n.fallbacks = true


  {#-
   you may use other configuration here for mail eg: sendgrid
  #}
{%- if salt['pillar.get']('discourse:smtp:enabled', False) %}
{%- set smtp = salt['pillar.get']('discourse:smtp') %}
{%- set smtp_default = salt['pillar.get']('smtp') %}
{%- set user =  smtp['user']|default(smtp_default['user']) %}
  config.action_mailer.delivery_method = :smtp
  config.action_mailer.smtp_settings = {
     :address              => "{{ smtp['server']|default(smtp_default['server']) }}",
     :port                 => {{ smtp['port']|default(smtp_default['port']) }},
     :domain               => "{{ smtp['domain']|default( user.split('@', 1)[1] ) }}",
     :user_name            => "{{ user }}",
     :password             => "{{ smtp['password']|default(smtp_default['password']) }}",
     :authentication       => "{{ smtp['authentication']|default('plain') }}",
{%- if smtp['tls']|default(False) %}
     :enable_starttls_auto => true
{%- else %}
    :enable_starttls_auto => false
{%- endif %}
  }

{%- else %}
  config.action_mailer.delivery_method = :sendmail
  config.action_mailer.sendmail_settings = {arguments: '-i'}
{%- endif %}

  {#-
   Send deprecation notices to registered listeners
  #}
  config.active_support.deprecation = :notify

  {#-
   this will cause all handlebars templates to be pre-compiles, making your page faster
  #}
  config.handlebars.precompile = true

  {#-
   this setting enables rack_cache so it caches various requests in redis
  #}
  config.enable_rack_cache = true

  {#-
   allows admins to use mini profiler
  #}
  config.enable_mini_profiler = true

  {#-
   allows Cross-origin resource sharing (CORS) for API access in JavaScript (default to false for security).
   See the initializer and https://github.com/cyu/rack-cors for configuration documentation.

   config.enable_rack_cors = false
   config.rack_cors_origins = ['*']
   config.rack_cors_resource = ['*', { :headers => :any, :methods => [:get, :post, :options] }]

   Discourse strongly recommend you use a CDN.
   For origin pull cdns all you need to do is register an account and configure
   config.action_controller.asset_host = "http://{{ salt['pillar.get']('discourse:hostnames')[0] }}"

   a comma delimited list of emails your devs have
   developers have god like rights and may impersonate anyone in the system
   normal admins may only impersonate other moderators (not admins)
  #}
  config.developer_emails = []

end
