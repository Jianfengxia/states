# {{ pillar['message_do_not_modify'] }}
{#-
 This file contains the checks for the low-level infrastructure components
 supported by salt.
-#}

{%- for user in pillar['shinken']['users'] %}
define contact {
    contact_name {{ user }}
    email {{ pillar['shinken']['users'][user]['email'] }}
    can_submit_commands 1
    password {{ pillar['shinken']['users'][user]['password'] }}
    is_admin 1
    host_notification_period 24x7
    host_notification_options d,u,r,f,s
    host_notification_commands notify-host-by-email
    host_notifications_enabled 1
    service_notification_period 24x7
    service_notification_options c,w,r,u
    service_notification_commands notify-service-by-email
    service_notifications_enabled 1
}
{% endfor -%}

define contactgroup {
    contactgroup_name admins
    alias admins
    members {% for user in pillar['shinken']['users'] %}{{ user }}{% if not loop.last %},{% endif %}{% endfor %}
    # host notifications can be sent anytime
    host_notification_period 24x7
    # send notifications for all host states, flapping events (f), and scheduled
    # downtime events (s)
    host_notification_options d,u,r,f,s
    # send host notifications via email
    host_notification_commands notify-host-by-email
    host_notifications_enabled 1

    # service notifications can be sent anytime
    service_notification_period 24x7
    service_notification_options c,w,r,u
    # send service notifications via email
    service_notification_commands notify-service-by-email
    service_notifications_enabled 1
}

define command {
    command_name notify-host-by-email
    command_line /usr/bin/printf "%b" "Shinken Notification\n\nType:$NOTIFICATIONTYPE$\nHost: $HOSTNAME$\nState: $HOSTSTATE$\nAddress: $HOSTADDRESS$\nInfo: $HOSTOUTPUT$\nWhen: $LONGDATETIME$\n\nLast Up: $LASTHOSTUP$\nLast Down: $LASTHOSTDOWN$\nLast Unreachable: $LASTHOSTUNREACHABLE$" | /usr/bin/bsd-mailx -s "Host $HOSTSTATE$ alert for $HOSTNAME$!" $CONTACTEMAIL$

# send email for a service
define command {
    command_name notify-service-by-email
    command_line /usr/bin/printf "%b" "Shinken Notification\n\nNotification Type: $NOTIFICATIONTYPE$\n\nService: $SERVICEDESC$\nHost: $HOSTALIAS$\nAddress: $HOSTADDRESS$\nState: $SERVICESTATE$\nWhen: $LONGDATETIME$\n\nAdditional Info : $SERVICEOUTPUT$\n\nLast OK: $LASTSERVICEOK$\nLast Warning: $LASTSERVICEWARNING$\nLast Unknown: $LASTSERVICEUNKNOWN$\nLast Critical: $LASTSERVICECRITICAL$\n\nServices OK: $TOTALSERVICESOK$\nServices Warning/Unhandled: $TOTALSERVICESWARNING$/$TOTALSERVICESWARNINGUNHANDLED$\nServices Critical/Unhandled: $TOTALSERVICESCRITICAL$/$TOTALSERVICESCRITICALUNHANDLED$\nServices Unknown/Unhandled: $TOTALSERVICESUNKNOWN$/$TOTALSERVICESUNKNOWNUNHANDLED$\nTotal Services Problems/Unhandlded: $TOTALSERVICEPROBLEMS$/$TOTALSERVICEPROBLEMSUNHANDLED$" | /usr/bin/bsd-mailx -s "** $NOTIFICATIONTYPE$ alert - $HOSTALIAS$/$SERVICEDESC$ is $SERVICESTATE$ **" $CONTACTEMAIL$
}

define command {
    command_name check_nrpe
    command_line /usr/lib/nagios/plugins/check_nrpe -H $HOSTADDRESS$ -t 9 -u -c $ARG1$
}

define command {
   command_name check_ping
   command_line /usr/lib/nagios/plugins/check_ping -H $HOSTADDRESS$ -w 3000,100% -c 5000,100% -p 1
}

define command {
    command_name check_tcp
    command_line /usr/lib/nagios/plugins/check_tcp -H $HOSTADDRESS$ -p $ARG1$
}

define timeperiod {
    timeperiod_name 24x7
    alias 24_Hours_A_Day,_7_Days_A_Week
{%- for day in ('sun', 'mon', 'tues', 'wednes', 'thurs', 'fri', 'satur') %}
    {{ day }}day 00:00-24:00
{% endfor -%}
}

define service {
    name salt-service
    register 0

    # Active service checks are enabled
    active_checks_enabled 1
    # Passive service checks are enabled/accepted
    passive_checks_enabled 1
    # Active service checks should be parallelized (disabling this can lead
    # to major performance problems)
    parallelize_check 1
    # We should obsess over this service (if necessary)
    obsess_over_service 1
    # Default is to NOT check service 'freshness'
    check_freshness 1
    freshness_threshold 3600
    # Service notifications are enabled
    notifications_enabled 1
    event_handler_enabled 0
    # Service event handler is enabled
{#    event_handler super_event_kill_everyone!DIE-#}
    # Flap detection is enabled
    flap_detection_enabled 1
    # Failure prediction is enabled
    failure_prediction_enabled 1
    # Process performance data
    process_perf_data 1
    # Retain status information across program restarts
    retain_status_information 1
    # Retain non-status information across program restarts
    retain_nonstatus_information 1
    # The service is not volatile
    is_volatile 0
    # The service can be checked at any time of the day
    check_period 24x7
    # Re-check the service up to 3 times in order to determine its final (hard)
    # state
    max_check_attempts 2
    check_interval 5
    # Re-check the service every three minutes until a hard state can be
    # determined
    retry_interval 3
    contact_groups admins
    # Send notifications about warning, unknown, critical, and recovery events
    notification_options w,u,c,r
    # Re-notify about service problems every hour
    notification_interval 0
    notification_period 24x7
    _httpstink NO
}

{%- for role in pillar['global_roles'] %}
define hostgroup {
    hostgroup_name {{ role }}
    alias {{ role|capitalize }} Role
{#
    members hosts
    hostgroup_members hostgroups
    notes	note_string
    notes_url	url
    action_url	url
    realm	realm
-#}
}

define servicegroup {
    servicegroup_name {{ role }}
    alias {{ role|capitalize }} Role
}
{% endfor -%}

{%- for host in pillar['monitoring']['hosts'] %}
define host {
    host_name {{ host }}
    address {{ pillar['monitoring']['hosts'][host]['address'] }}
    alias {{ host }}
    hostgroups {% for role in pillar['monitoring']['hosts'][host]['roles'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    contact_groups admins
    notification_interval 0
    first_notification_delay 0
    notification_options d,u,r
    notification_period 24x7
    notifications_enabled 1
    active_checks_enabled 1
    check_period 24x7
    check_interval 2
    retry_interval 1
    max_check_attempts 2
    check_command check_ping
    event_handler_enabled 0
    flap_detection_enabled 1
    process_perf_data 1
    retain_status_information 1
    retain_nonstatus_information 1
    business_impact 5
    poller_tag all
}
{% endfor -%}

{#-
 ########
 The following monitoring checks cover all common states that do have monitoring
 checks defined.

 TODO: add doc on pillar, hosts, roles and states structure expected in shinken
    pillar
 ########
 -#}

{#-
 Jinja2 macro for template nginx/nrpe/instance.jinja2
-#}
{%- set nginx_instances_checks = {'http': 'HTTP protocol', 'https': 'HTTPs Protocol', 'https_certificate': 'HTTPs Certificate Expiration'} -%}
{%- macro nginx_instance(deployment, state) -%}
    {%- for check in nginx_instances_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ deployment }}_nginx_{{ check }}
    display_name {{ deployment|capitalize }} {{ nginx_instances_checks[check] }}
    check_command check_nrpe!check_{{ deployment }}_nginx_{{ check }}
{%- if check == 'https_certificate' %}
    check_interval 1440 {#- only need to check https certificate each day -#}
{%- endif %}
    use salt-service
}
{% endfor -%}
{%- endmacro -%}

{#-
 Jinja2 macro for template uwsgi/nrpe/instance.jinja2
 -#}
{%- set uwsgi_instances_checks = {'master': 'uWSGI Master Process', 'worker': 'uWSGI Workers Process', 'uwsgi': 'uWSGI Ping'} -%}
{%- macro uwsgi_instance(deployment, state) -%}
    {%- for check in uwsgi_instances_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description uwsgi-{{ deployment }}-{{ check }}
    display_name {{ deployment|capitalize }} {{ uwsgi_instances_checks[check] }}
    check_command check_nrpe!check_{{ deployment }}_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endmacro -%}

{#-
 Jinja2 macro for template postgresql/nrpe.jinja2
 -#}
{%- set postgresql_client_checks = {'postgresql': 'PostgreSQL database'} -%}
{%- macro postgresql_client(deployment, state) -%}
    {%- for check in postgresql_client_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ deployment }}-{{ check }}
    display_name {{ deployment|capitalize }} {{ postgresql_client_checks[check] }}
    check_command check_nrpe!check_{{ deployment }}_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endmacro -%}

{#-
  Jinja2 macro to perform simple series of check_nrpe
-#}
{%- macro check_nrpe(prefix, data, state) -%}
{%- for check in data %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ prefix }}-{{ check }}
    display_name {{ prefix }} {{ data[check] }}
    check_command check_nrpe!check_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endmacro -%}

{#-
 State: amavis
 -#}

{%- if 'amavis' in pillar['monitoring']['states'] -%}
{%- set amavis_checks = {'master': 'Master Process', 'child': 'Child Processes', 'port': 'Listen Port'} -%}
{%- for check in amavis_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['amavis'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['amavis'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description amavis-{{ check }}
    display_name Amavis {{ amavis_checks[check] }}
    check_command check_nrpe!check_amavis_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#-
 State: apt
 -#}

{%- if 'apt' in pillar['monitoring']['states'] -%}
{%- set apt_checks = {'apt': 'APT Updates', 'apt_rc': 'APT Not-Purged'} -%}
{%- for check in apt_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['apt'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['apt'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ check }}
    display_name {{ apt_checks[check] }}
    check_command check_nrpe!check_{{ check }}
    use salt-service
    {#-
    Services that don't affect production and that have high cost in CPU, I/O
    and RAM to performs.
    Run them only each 6 hours.
    #}
    check_interval 360
    retry_interval 5
    notifications_enabled 0
}
{% endfor -%}
{%- endif -%}

{#-
 State: backup.server
 -#}

{%- if 'backup.server' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['backup.server'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['backup.server'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description backups
    display_name Backups
    check_command check_nrpe!check_backups
    use salt-service
}
{% endif -%}

{#-
 state: carbon
 -#}

{%- if 'carbon' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['carbon'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['carbon'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description carbon-instances
    display_name Carbon Instances
    check_command check_nrpe!check_carbon_instances
    use salt-service
}

{%- for port in (2003, 2004) %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['carbon'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['carbon'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description carbon-remote-port-{{ port }}
    display_name Carbon Remote Port {{ port }}
    check_command check_tcp!{{ port }}
    use salt-service
}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['carbon'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['carbon'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description carbon-local-port-{{ port }}
    display_name Carbon Local Port {{ port }}
    check_command check_nrpe!check_carbon_port_{{ port}}
    use salt-service
}
{% endfor -%}
{%- endif %}

{#-
 State: clamav
 -#}

{%- if 'clamav' in pillar['monitoring']['states'] -%}
{%- for procname in ('freshclam', 'clamav') %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['clamav'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['clamav'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ procname }}-daemon
    display_name {{ procname|capitalize }} Daemon
    check_command check_nrpe!check_{{ procname }}
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#-
 State: cron
 -#}

{%- if 'cron' in pillar['monitoring']['states'] -%}
{#-{{ check_nrpe("Cron", {'cron': 'Daemon'}, 'cron') }}#}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['cron'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['cron'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description cron-daemon
    display_name Cron Daemon
    check_command check_nrpe!check_cron
    use salt-service
}
{% endif -%}

{#-
 State: denyhosts
 -#}

{%- if 'denyhosts' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['denyhosts'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['denyhosts'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description denyhosts-daemon
    display_name Denyhosts Daemon
    check_command check_nrpe!check_denyhosts
    use salt-service
}
{% endif -%}

{#-
 State: diamond
 -#}

{%- if 'diamond' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['diamond'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['diamond'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description diamond-daemon
    display_name Diamond Daemon
    check_command check_nrpe!check_diamond
    use salt-service
}
{% endif -%}

{#- TODO: django? -#}

{#-
 State: dovecot
 -#}

{%- if 'dovecot' in pillar['monitoring']['states'] -%}
{%- for daemon in ('', 'anvil', 'log', 'config') %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['dovecot'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['dovecot'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description dovecot{% if daemon %}-{{ daemon }}-{% endif %}daemon
    display_name Dovecot {% if daemon %}{{ daemon }} {% endif %}Daemon
    check_command check_nrpe!check_dovecot{% if daemon %}_{{ daemon }}{% endif %}
    use salt-service
}
{% endfor -%}

{#- TODO: check remote port? -#}
{%- for port in ('imap', 'pop3', 'imaps', 'pop3s') %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['dovecot'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['dovecot'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description dovecot-{{ port }}-port
    display_name Dovecot {{ port|upper }} Port
    check_command check_nrpe!check_dovecot_{{ port }}_port
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#-
 State: elasticsearch
 -#}

{%- if 'elasticsearch' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['elasticsearch'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['elasticsearch'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description elasticsearch-daemon
    display_name Elasticsearch Daemon
    check_command check_nrpe!check_elasticsearch
    use salt-service
}

define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['elasticsearch'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['elasticsearch'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description elasticsearch-cluster
    display_name Elasticsearch Cluster
    check_command check_nrpe!check_elasticsearch_cluster
    use salt-service
}

{%- set elasticsearch_checks = {'http': 9200, 'transport': 9300} -%}
{%- for check in elasticsearch_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['elasticsearch'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['elasticsearch'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description elasticsearch-remote-{{ check }}-port
    display_name Elasticsearch Remote {{ check|capitalize }} Port
    check_command check_tcp!{{ elasticsearch_checks[check] }}
    use salt-service
}

define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['elasticsearch'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['elasticsearch'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description elasticsearch-local-{{ check }}-port
    display_name Elasticsearch Local {{ check|capitalize }} Port
    check_command check_nrpe!check_elasticsearch_{{ check }}_port
    use salt-service
}
{% endfor -%}
{{ nginx_instance('elasticsearch', 'elasticsearch') }}
{%- endif -%}

{#-
 State: firewall
 -#}

{%- if 'firewall' in pillar['monitoring']['states'] -%}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['firewall'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['firewall'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description firewall-rules
    display_name Firewall Rules
    check_command check_nrpe!check_firewall
    use salt-service
}
{% endif -%}

{#-
 State: graphite
 -#}
{%- if 'graphite' in pillar['monitoring']['states'] -%}
{{ postgresql_client('graphite', 'graphite') }}
{{ nginx_instance('graphite', 'graphite') }}
{{ uwsgi_instance('graphite', 'graphite') }}
{%- endif -%}

{#-
 State: graylog2.server
 -#}
{%- if 'graylog2.server' in pillar['monitoring']['states'] -%}
{%- set graylog2_server_checks = {'server': 'Server', 'logs': 'Logs Rate'} -%}
{%- for check in graylog2_server_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['graylog2.server'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['graylog2.server'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description graylog2-{{ check }}
    display_name Graylog2 {{ graylog2_server_checks[check] }}
    check_command check_nrpe!check_graylog2_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#-
 State: graylog2.web
 -#}
{%- if 'graylog2.web' in pillar['monitoring']['states'] -%}
{{ nginx_instance('graylog2', 'graylog2.web') }}
{{ uwsgi_instance('graylog2', 'graylog2.web') }}
{%- endif -%}

{#-
 State: gsyslog
 -#}
{%- if 'gsyslog' in pillar['monitoring']['states'] -%}
{%- for check in ('syslogd', 'klogd') %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['gsyslog'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['gsyslog'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description gsyslog-{{ check }}
    display_name Gsyslog {{ check }}
    check_command check_nrpe!check_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#-
 State: memcache
 -#}

{%- if 'memcache' in pillar['monitoring']['states'] -%}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['memcache'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['memcache'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description memcache-daemon
    display_name Memcache Daemon
    check_command check_nrpe!check_memcached
    use salt-service
}
{% endif -%}

{#-
 State: mongodb
 -#}

{%- if 'mongodb' in pillar['monitoring']['states'] -%}
{%- set mongodb_checks = {'': 'Daemon', '_port': 'Port', '_http': 'HTTP Interface', '_http_port': 'HTTP Port'} -%}
{%- for check in mongodb_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['mongodb'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['mongodb'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description mongodb{{ check|default('_daemon') }}
    display_name MongoDB {{ mongodb_checks[check] }}
    check_command check_nrpe!check_mongodb{{ check }}
    use salt-service
}
{% endfor -%}
{#- TODO: remote port check? -#}
{%- endif -%}

{#-
 State: nginx
 -#}

{%- if 'nginx' in pillar['monitoring']['states'] -%}
{%- set nginx_checks = {'master': 'Master Process', 'worker': 'Worker Processes', 'status': 'Status Page', 'logger_access': 'Access Logger', 'logger_error': 'Error Logger'} -%}
{%- for check in nginx_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['nginx'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['nginx'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description nginx-{{ check }}
    display_name Nginx {{ nginx_checks[check] }}
    check_command check_nrpe!check_nginx_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#-
 State: nrpe
 -#}

{%- if 'nrpe' in pillar['monitoring']['states'] -%}
{%- set nrpe_checks = {'loopback': 'Loopback Interface', 'memory': 'Memory Usage', 'users': 'Logged Users', 'load': 'Load Average', 'all_disks': 'All Disks', 'zombie_procs': 'Zombie Processes', 'total_procs': 'Total Processes'} -%}
{%- for check in nrpe_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['nrpe'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['nrpe'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description linux-{{ check }}
    display_name Linux {{ nrpe_checks[check] }}
    check_command check_nrpe!check_{{ check }}
    use salt-service
}
{% endfor -%}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['nrpe'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['nrpe'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description remote-nrpe-port
    display_name Remote NRPE Port
    check_command check_tcp!5666
    use salt-service
}
{% endif -%}

{#-
 State: ntp
 -#}

{%- if 'ntp' in pillar['monitoring']['states'] -%}
{%- set ntp_checks = {'ntp': 'NTP Daemon', 'ntp_sync': 'NTP Synchronization'} -%}
{%- for check in ntp_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['ntp'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['ntp'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ check }}
    display_name {{ ntp_checks[check] }}
    check_command check_nrpe!check_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#-
 State: openldap
 -#}

{%- if 'openldap' in pillar['monitoring']['states'] -%}
{%- set openldap_checks = {'openldap': 'OpenLDAP Daemon (slapd)', 'openldap_port': 'LDAP Port', 'openldap_base': 'LDAP Base'} -%}
{%- for check in openldap_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['openldap'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['openldap'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ check }}
    display_name {{ openldap_checks[check] }}
    check_command check_nrpe!check_{{ check }}
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#- TODO: openvpn -#}

{#-
 State: pdnsd
 -#}

{%- if 'pdnsd' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['pdnsd'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['pdnsd'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description pdnsd-daemon
    display_name Proxy DNS Daemon
    check_command check_nrpe!check_pdnsd
    use salt-service
}
{% endif -%}

{#-
 State: postfix
 -#}
{#- TODO: postfix -#}

{#-
 State: postgresql.server
 -#}

{%- if 'postgresql.server' in pillar['monitoring']['states'] -%}
{%- set postgresql_server_checks = {'server': 'Daemon', 'port': 'Port'} -%}
{%- for check in postgresql_server_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['postgresql.server'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['postgresql.server'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description postgresql-{{ check }}
    display_name PostgreSQL {{ postgresql_server_checks[check] }}
    check_command check_nrpe!check_postgresql_{{ check }}
    use salt-service
}
{% endfor -%}
{{ postgresql_client('diamond', 'postgresql.server') }}
{%- endif -%}

{#-
 State: proftpd
 -#}

{%- if 'proftpd' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['proftpd'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['proftpd'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description proftpd-daemon
    display_name ProFTPD Daemon
    check_command check_nrpe!check_proftpd
    use salt-service
}
{{ postgresql_client('proftpd', 'proftpd') }}
{% endif -%}

{#-
 State: rabbitmq
 -#}

{%- if 'rabbitmq' in pillar['monitoring']['states'] -%}
{%- set rabbitmq_checks = {'rabbitmq': 'Daemon', 'rabbitmq_port_management': 'Management Port', 'rabbitmq_port_console': 'Console Port', 'rabbitmq_port_amqp': 'Local AMQP Port', 'erlang': 'Erlang', 'erlang_port': 'Erlang Port'} -%}
{%- for check in rabbitmq_checks %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['rabbitmq'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['rabbitmq'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description {{ check }}
    display_name RabbitMQ {{ rabbitmq_checks[check] }}
    check_command check_nrpe!check_{{ check }}
    use salt-service
}
{% endfor -%}

{{ nginx_instance('rabbitmq', 'rabbitmq') }}

define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['rabbitmq'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['rabbitmq'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description remote-rabbitmq-amqp-port
    display_name Remote RabbitMQ AMQP Port
    check_command check_tcp!55672
    use salt-service
}
{% endif -%}

{#-
 State: salt.api
 -#}

{%- if 'salt.api' in pillar['monitoring']['states'] -%}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['salt.api'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['salt.api'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description salt-api-daemon
    display_name Salt API Daemon
    check_command check_nrpe!check_salt_api
    use salt-service
}
{{ nginx_instance('salt_api', 'salt.api') }}
{%- endif -%}

{#-
 State: salt.master
 -#}

{%- if 'salt.master' in pillar['monitoring']['states'] -%}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['salt.master'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['salt.master'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description salt-master
    display_name Salt Master Daemon
    check_command check_nrpe!check_salt_master
    use salt-service
}

{%- for port in (4505, 4506) %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['salt.master'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['salt.master'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description salt-master-remote-port-{{ port }}
    display_name Salt Master Remote Port {{ port }}
    check_command check_tcp!{{ port }}
    use salt-service
}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['salt.master'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['salt.master'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description salt-master-local-port-{{ port }}
    display_name Salt Master Local Port {{ port }}
    check_command check_nrpe!check_salt_master_port_{{ port }}
    use salt-service
}
{% endfor -%}
{%- endif -%}

{#-
 State: salt.minion
 -#}

{%- if 'salt.minion' in pillar['monitoring']['states'] -%}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['salt.minion'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['salt.minion'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description salt-minion
    display_name Salt Minion Daemon
    check_command check_nrpe!check_salt_minion
    use salt-service
}}
{%- endif -%}

{#-
 State: sentry
 -#}

{%- if 'sentry' in pillar['monitoring']['states'] -%}
{{ postgresql_client('sentry', 'sentry') }}
{{ nginx_instance('sentry', 'sentry') }}
{{ uwsgi_instance('sentry', 'sentry') }}
{%- endif -%}

{#-
 State: all shinken states
 -#}

{%- set shinken_listen_port = {
    'arbiter': 7770,
    'broker': 7772,
    'scheduler': 7768,
    'poller': 7771,
    'reactionner': 7769
} -%}

{%- for shinken_role in shinken_listen_port -%}
{%- set state_name = 'shinken.' + shinken_role -%}
{%- if state_name in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description shinken-{{ shinken_role }}-deamon
    display_name Shinken {{ shinken_role|capitalize }} Deamon
    check_command check_nrpe!check_shinken_{{ shinken_role }}
    use salt-service
}

define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description shinken-{{ shinken_role }}-local-port
    display_name Shinken {{ shinken_role|capitalize }} Local Port
    check_command check_nrpe!check_shinken_{{ shinken_role }}_port
    use salt-service
}

define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description shinken-{{ shinken_role }}-remote-port
    display_name Shinken {{ shinken_role|capitalize }} Remote Port
    check_command check_tcp!{{ shinken_listen_port[shinken_role] }}
    use salt-service
}

{%- if state_name == 'shinken.broker' %}
{{ nginx_instance('shinken', 'shinken.broker') }}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description shinken-broker-web
    display_name Shinken Broker Web UI Port
    check_command check_nrpe!check_shinken_broker_web
    use salt-service
}

define service {
    hostgroup_name {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states'][state_name] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description shinken-broker-http
    display_name Shinken Broker Web UI HTTP
    check_command check_nrpe!check_shinken_broker_http
    use salt-service
}
{% endif -%}
{%- endif -%}
{%- endfor -%}

{#
 There can only be a single one running web node.
 If there's more than one broker, check that at least one is up to consider.
 #}
{#
TODO: go back at doing this
{% if pillar['shinken']['architecture']['broker']|length > 1 %}
define service {
    use salt-service
    host_name {{ pillar['shinken']['architecture']['arbiter'][0] }}
    service_description Shinken-broker-web
    check_command bp_rule!({% for host in pillar['shinken']['architecture']['broker'] %}{{ host }},Shinken-broker-http{% if not loop.last %} | {% endif %}{% endfor %})
}
{% endif %}
#}

{#-
 State: ssh.server
 -#}

{%- if 'ssh.server' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['ssh.server'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['ssh.server'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description ssh-daemon-local-port
    display_name SSH Daemon Local Port
    check_command check_nrpe!check_ssh_port
    use salt-service
}
{% endif -%}

{#-
 State: statsd
 -#}

{%- if 'statsd' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['statsd'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['statsd'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description statsd-daemon
    display_name StatsD Daemon
    check_command check_nrpe!check_statsd
    use salt-service
}
{% endif -%}

{#-
 State: uwsgi
 -#}

{%- if 'uwsgi' in pillar['monitoring']['states'] %}
define service {
    hostgroup_name {% for role in pillar['monitoring']['states']['uwsgi'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    servicegroups {% for role in pillar['monitoring']['states']['uwsgi'] %}{{ role }}{% if not loop.last %},{% endif %}{% endfor %}
    service_description uWSGI-emperor
    display_name uWSGI Emperor
    check_command check_nrpe!check_uwsgi
    use salt-service
}
{% endif -%}
