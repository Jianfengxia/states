{#-
Use of this source code is governed by a BSD license that can be found
in the doc/license.rst file.

Author: Bruno Clermont <bruno@robotinfra.com>
Maintainer: Quan Tong Anh <quanta@robotinfra.com>
-#}
# {{ salt['pillar.get']('message_do_not_modify') }}
{%- set mine = salt['mine.get']('*', 'monitoring.data') %}
{%- set ssl = salt['pillar.get']('shinken:ssl', False) %}

define realm {
    realm_name All
    default 1
}

{#-
Description: The Arbiter is responsible for:
- Loading, manipulating and dispatching the configuration
- Validating the health of all other Shinken daemons
- Issuing global directives to Shinken daemons (kill, activate-spare, etc.)
http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/arbiter
-#}
{%- for id in salt['pillar.get']('shinken:architecture:arbiter') -%}
  {%- if id in mine %}
define arbiter {
    arbiter_name arbiter-{{ id }}
    host_name {{ id }}
    address {{ mine[id]['ip_addrs']['private'] }}
    port 7770
    modules PickleRetentionArbiter
    {# only the first one is not a spare #}
    {%- if not loop.first %}
    spare 1
    {%- endif %}
    {%- if ssl %}
    use_ssl 1
    {%- endif %}
}
  {%- else %}
# Can't define arbiter {{ id }}, data not yet available in salt mine
  {%- endif -%}
{%- endfor %}

define module {
    module_name PickleRetentionArbiter
    module_type pickle_retention_file_generic
    path /var/lib/shinken/arbiter.retention
}

{#-
The scheduler is a "Host manager". It gets the hosts and their services,
schedules the checks and transmit them to the pollers.
Description: The scheduler is responsible for:
- Creating the dependency tree
- Scheduling checks
- Calculating states
- Requesting actions from a reactionner
- Buffering and forwarding results its associated broker
http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/scheduler
-#}
{%- for id in salt['pillar.get']('shinken:architecture:scheduler') -%}
  {%- if id in mine %}
define scheduler {
    scheduler_name scheduler-{{ id }}
    address {{ mine[id]['ip_addrs']['public'] }}
    port 7768
    modules scheduler-retention
    realm All
{#-    spare 0-#}
{#-    # Skip initial broks creation. Boot fast, but some broker modules won't-#}
{#-    # work with it!-#}
{#-   skip_initial_broks 0#}
    {%- if ssl %}
    use_ssl 1
    {%- endif %}
}
  {%- else %}
# Can't define scheduler {{ id }}, data not yet available in salt mine
  {%- endif -%}
{%- endfor %}

define module {
    module_name scheduler-retention
    module_type pickle-retention-file-generic
    path /var/lib/shinken/scheduler.retention
}

{#-
Description: The poller is responsible for:
- Active data acquisition
- Local passive data acquisition
http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/poller
#}

define module{
    module_name booster-nrpe
    module_type nrpe_poller
}

{%- for id in salt['pillar.get']('shinken:architecture:poller') -%}
  {%- if id in mine %}
define poller {
    poller_name poller-{{ id }}
    address {{ mine[id]['ip_addrs']['public'] }}
    port 7771
    poller_tags {{ salt['pillar.get']('shinken:architecture:poller:' + id) }}
    realm All
    modules booster-nrpe
    {%- if ssl %}
    use_ssl 1
    {%- endif %}
}
  {%- else %}
# Can't define poller {{ id }}, data not yet available in salt mine
  {%- endif -%}
{%- endfor -%}

{#-
Description: The broker is responsible for:
- Exporting centralized logs of all Shinken daemon processes
- Exporting status data
- Exporting performance data
- Exposing Shinken APIs:
  - Status data
  - Performance data
  - Configuration data
  - Command interface
http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/broker
-#}
{%- set broker = salt['pillar.get']('shinken:architecture:broker') %}
{%- for id in broker -%}
  {%- if id in mine %}
define broker {
    broker_name broker-{{ id }}
{%- set graphite_address = salt['pillar.get']('graphite_address', False) %}
    address {{ mine[id]['ip_addrs']['public'] }}
    port 7772
    modules Syslog, PickleRetentionBroker, webui{% if salt['pillar.get']('graphite_address', False) %}, graphite{% endif %}
    realm All
    manage_arbiters 1
    {%- if not loop.first %}
    spare 1
    {%- endif -%}
    {%- if salt['pillar.get']('shinken:ssl', False) %}
    use_ssl 1
    {%- endif %}
{#-                            ; broker for the arbiter.
    manage_sub_realms   1   ; Does it take jobs from schedulers of sub-Realms?
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every minutes#}
}
  {%- else %}
# Can't define broker {{ id }}, data not yet available in salt mine
  {%- endif -%}
{%- endfor -%}

{#-
Send all logs to system's Syslog
Send all logs to a local syslog server. Support for remote syslog can be
implemented if requested. Just lookup the syslog module source code, it's
easy to modify. Use for example with Splunk Molog, Logstash or other log
management and analysis system.
#}
define module {
    module_name Syslog
    module_type syslog
}

{%- if salt['pillar.get']('graphite_address', False) %}
define module {
    module_name graphite
    module_type graphite_perfdata
    host {{ salt['pillar.get']('graphite_address', False) }}
    {#- Or 2004 if using use_pickle 1 #}
    port 2003
    #tick_limit 300 ; Default value 300
    graphite_data_source shinken
}

define module {
    module_name ui-graphite
    module_type graphite-webui
    uri {{ salt['pillar.get']('shinken:graphite_url') }}
    templates_path /usr/local/shinken/share/templates/graphite/
    graphite_data_source shinken
}
{%- endif %}

define module {
    module_name PickleRetentionBroker
    module_type pickle_retention_file_generic
    path /var/lib/shinken/broker.retention
}

define module {
    module_name webui
    module_type webui
{%- if broker|length == 1 %}
    host 127.0.0.1
{%- else %}
    host 0.0.0.0
{%- endif %}
    port 7767
    auth_secret CHANGE_ME
    manage_acl 1
    login_text Monitoring
{#-    allow_html_output 0       ; Allow or not HTML chars in plugins output.
                                ; WARNING: Allowing can be a security issue.
    max_output_length   100     ; Maximum output length for plugin output in webui
    play_sound          0       ; Play sound on new non-acknowledged problems.#}

    modules SQLitedb, auth-cfg-password{% if salt['pillar.get']('graphite_address', False) %}, ui-graphite{% endif %}

{#-    ## Advanced Options
    # Don't use them as long as you don't know what you are doing!
    #http_backend            auto    ; Choice is: auto, wsgiref, cherrypy,
                                     ; paste, tornado, twisted or gevent.
                                     ; Leave auto to find the best available.
    #remote_user_enable      1       ; If WebUI is behind a web server which
                                     ; has already authenticated user, enable.
    #remote_user_variable    X_Remote_User  ; Set to the HTTP header containing
                                     ; the authenticated user s name, which
                                     ; must be a Shinken contact.#}
}

{#- Module:      OpenLDAP_UI
## Loaded by:   WebUI
## Usage:       Uncomment and set your value in ldap_uri
# Check authentication for WebUI using an Open Ldap server.
define module {
    module_name     OpenLDAP_UI
    module_type     ad_webui
    #ldap_uri        ldaps://myserver
    username        user
    password        password
    basedn          DC=google,DC=com

    # For mode you can switch between ad (active dir)
    # and openldap
    mode            openldap
}-#}

{#- Check authentification using password parameter in contact definition. #}
define module {
    module_name auth-cfg-password
    module_type cfg_password_webui
}

{#-
Description: The reactionner is responsible for:
- Executing notification actions
- Executing event handler actions
http://www.shinken-monitoring.org/wiki/official/configuringshinken/configobjects/reactionner
-#}
{%- for id in salt['pillar.get']('shinken:architecture:reactionner') %}
define reactionner {
  {%- if id in mine %}
    reactionner_name reactionner-{{ id }}
    address {{ mine[id]['ip_addrs']['public'] }}
    port 7769
    realm All
{#-  Optional
    manage_sub_realms   0   ; Does it take jobs from schedulers of sub-Realms?
    min_workers         1   ; Starts with N processes (0 = 1 per CPU)
    max_workers         15  ; No more than N processes (0 = 1 per CPU)
    polling_interval    1   ; Get jobs from schedulers each 1 second
    timeout             3   ; Ping timeout
    data_timeout        120 ; Data send timeout
    max_check_attempts  3   ; If ping fails N or more, then the node is dead
    check_interval      60  ; Ping node every minutes#}
    modules
    {%- if salt['pillar.get']('shinken:ssl', False) %}
    use_ssl 1
    {%- endif %}
  {%- else %}
# Can't define reactionner {{ id }}, data not yet available in salt mine
  {%- endif %}
}
{%- endfor %}

define module {
    module_name nsca
    module_type nsca_server
    host *
    port 5667
    encryption_method 1
    password {{ salt['pillar.get']('nrpe:nsca:password') }}
}

{#-
The receiver manages passive information. It's just a "buffer" which will
load passive modules (like NSCA) and be read by the arbiter to dispatch data.
-#}
{%- for id in salt['pillar.get']('shinken:architecture:receiver', []) %}
define receiver {
  {%- if id in mine %}
    receiver_name receiver-{{ id }}
    address {{ mine[id]['ip_addrs']['public'] }}
    port 7773
    modules nsca
    realm All
    {%- if salt['pillar.get']('shinken:ssl', False) %}
    use_ssl 1
    {%- endif %}
{#-    direct_routing      0   ; If enabled, it will directly send commands to the
                            ; schedulers if it know about the hostname in the
                            ; command.#}
}
  {%- else %}
# Can't define receiver {{ id }}, data not yet available in salt mine
  {%- endif -%}
{%- endfor -%}

{#-
Module: SQLitedb
Loaded by: webui
In webui: Save/read user preferences
#}
define module {
    module_name SQLitedb
    module_type sqlitedb
    uri /var/lib/shinken/webui.sqlite
}
