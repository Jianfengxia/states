# {{ pillar['message_do_not_modify'] }}
$ModLoad imuxsock # provides support for local system logging
$ModLoad imklog   # provides kernel logging support (previously done by rklogd)
{#- #$ModLoad immark  # provides --MARK-- message capability #}

{#-
 provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 514

 provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 514


GLOBAL DIRECTIVES ####


 Use traditional timestamp format.
 To enable high precision timestamps, comment out the following line.

#}
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

{#- # Filter duplicated messages #}
$RepeatedMsgReduction on

{#-
# Set the default permissions for all log files.
#
#}
$FileOwner syslog
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022
$PrivDropToUser syslog
$PrivDropToGroup syslog

$WorkDirectory /var/spool/rsyslog
$IncludeConfig /etc/rsyslog.d/*.conf

{#-
20 ufw
 Log kernel generated UFW log messages to file
:msg,contains,"[UFW " /var/log/ufw.log

 Uncomment the following to stop logging anything that matches the last rule.
 Doing this will stop logging kernel generated UFW log messages to the file
 normally containing kern.* messages (eg, /var/log/kern.log)
& ~
#}

{#-
50 default
  Default rules for rsyslog.

			For more information see rsyslog.conf(5) and /etc/rsyslog.conf


 First some standard log files.  Log by facility.

auth,authpriv.*			/var/log/auth.log
*.*;auth,authpriv.none		-/var/log/syslog
#}
{% if not pillar['debug'] %}
{%- for f in 'sshd', 'cron', 'sudo' %}
    {%- for act in 'opened', 'closed' %}
:msg, contains, "pam_unix({{ f }}:session): session {{ act }} for user" ~
    {%- endfor %}
{%- endfor %}
{% endif %}
{#-
kern.*				-/var/log/kern.log
mail.*				-/var/log/mail.log

cron.*				/var/log/cron.log
daemon.*			-/var/log/daemon.log
lpr.*				-/var/log/lpr.log
user.*				-/var/log/user.log

 Logging for the mail system.  Split it up so that
 it is easy to write scripts to parse these files.
mail.info			-/var/log/mail.info
mail.warn			-/var/log/mail.warn
mail.err			/var/log/mail.err

# Logging for INN news system.
news.crit			/var/log/news/news.crit
news.err			/var/log/news/news.err
news.notice			-/var/log/news/news.notice


 Some "catch-all" log files.

*.=debug;\
	auth,authpriv.none;\
	news.none;mail.none	-/var/log/debug
*.=info;*.=notice;*.=warn;\
	auth,authpriv.none;\
	cron,daemon.none;\
	mail,news.none		-/var/log/messages


 Emergencies are sent to everybody logged in.

*.emerg                                :omusrmsg:*


 I like to have messages displayed on the console, but only on a virtual
 console I usually leave idle.

daemon,mail.*;\
	news.=crit;news.=err;news.=notice;\
	*.=debug;*.=info;\
	*.=notice;*.=warn	/dev/tty8

 The named pipe /dev/xconsole is for the `xconsole' utility.  To use it,
 you must invoke `xconsole' with the `-file' option:

    $ xconsole -file /dev/xconsole [...]

 NOTE: adjust the list below, or you'll go crazy if you have a reasonably
      busy site..

daemon.*;mail.*;\
	news.err;\
	*.=debug;*.=info;\
	*.=notice;*.=warn	|/dev/xconsole
#}

*.*         		-/var/log/syslog
{%- set use_tcp = salt['pillar.get']('rsyslog:tcp', False) %}
{%- if 'graylog2_address' in pillar %}
    {%- if use_tcp %}
*.*;local7.none @@{{ pillar['graylog2_address'] }}:514
    {%- else %}
*.*;local7.none @{{ pillar['graylog2_address'] }}:514
    {%- endif %}
{%- endif %}
